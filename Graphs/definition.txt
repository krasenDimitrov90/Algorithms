Graphs consists of two things
    - vertices ( nodes )
    - edges
Graphs can be 
    - Directed
    - Underected

Implementing Graphs 
    - Adjacency Matrix       0-----1
        0  1  2  3           |    /
    0   0  1  1  0           |   /
    1   1  0  1  0           |  /
    2   1  1  0  1           | /
    3   0  0  1  0           2-----3


    - Adjacency List  -> for the same graphs as the above
    {
        0: [1, 2]
        1: [0, 2]
        2: [0,1,3]
        3: [2]
    }

Big O
    V - vertices
    E - edges
Operations     |  Adjacency List  |  Adjacency Matrix
Add Vertex     |       O(1)       |       O(V^2)
Add Edge       |       O(1)       |        O(1)
Remove Vertex  |     O(V + E)     |       O(V^2)
Remove Edge    |       O(E)       |        O(1)
Query          |     O(V + E)     |        O(1)
Storage        |     O(V + E)     |       O(V^2)

If we have more nodes, but less conections (that is what happens most of the time)
is musch better to use an Adjacency List